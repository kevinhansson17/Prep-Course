// Objetos: Los objetos son estructuras que nos permiten guardar informacion sobre las propiedades de algo a traves de pares "CLave:Valor". Donde clave sería un sinónimo de propiedad a la cual se le asigna un valor que despues puede ser invocado a traves del nombre del objeto. Similar al concepto de arreglos, con la diferencia de que en lugar de ordenar la informacion(propiedades) de forma numérica, las propiedades adqueiren nombres ùnicos que nos permiten distinguirlas de todas las demás.
// Propiedades: son todas las caracteristicas únicas que se le quieran asignar al objeto con el fin de que se sepa exactamente a que tipo de informacion nos referimos (EJ: nombre, correo, telefono, etc), y pueden adquirir cualqueir tipo de valor: booleanos, strings, numeros, arreglos, funciones, o incluso otros objetos.
// Métodos: Como se mencionó antes, las propiedades pueden adquirir cualqueir tipo de valor en JS, en el caso particular de que dicho valor sea guardado en forma de funcion, se lo denomina "Método".
// Bucle for...in: Debido a que los objetos no poseen indices numéricos para recorrer sus propiedades a traves de un bucle for simple, JS ofrece otro tipo de bucle "For (variables) in (objeto)" que nos permite recorrer todas las propiedades de un objeto en el orden que se hayan asignado cada una de ellas.
// Dot notation vs Bracket Notation: ambas son maneras de declarar propiedades dentro de los objetos, sin embargo presentan algunas diferencias en su uso. La primera es mas rapida y simple de escribir, solo necesitamos el nombre del objeto seguido de un punto y la propiedad que queramos declarar o invocar (NombreDeObj.propiedad = ValorDeLaPropiedad). Sin embargo si quisieramos intercalar el valor de dicha propiedad a traves de una variable, esto ya no se podria ya que lo que sigue despues del Dot o punto es literal el nombre la propiedad (si una variable se llama como la propiedad, simplemente tomara la propiedad, no la variable). Para resolver esto, se utiliza la segunda alternativa, de brackets notation, la cual si nos permite asignar variables como valores de una propiedad, y se expresa: NombreDelObj ["NombreDeLaPropiedad"], en forma de string; o bien var = NombreDeLaPropiedad ; ==> NombreDelObj [NombreDeLaPropiedad]